/**
 * generated by Xtext
 */
package dk.itu.smdp.survey.generator;

import com.google.common.base.Objects;
import dk.itu.smdp.survey.generator.PhpTemplate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import survey.Answer;
import survey.AnswerTemplate;
import survey.AnswerTemplateRef;
import survey.Date;
import survey.Group;
import survey.HasOptions;
import survey.Item;
import survey.Multiple;
import survey.Option;
import survey.Question;
import survey.Scale;
import survey.Single;
import survey.Survey;
import survey.Table;
import survey.TableQuestion;
import survey.Text;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class DslGenerator implements IGenerator {
  private int nextId;
  
  private HashMap<Question,String> idMap;
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Survey survey = ((Survey) _head);
    this.nextId = 0;
    HashMap<Question,String> _hashMap = new HashMap<Question, String>();
    this.idMap = _hashMap;
    this.genPhp(survey, fsa);
    this.genLatex(survey, fsa);
  }
  
  public void genPhp(final Survey survey, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Item> _items = survey.getItems();
      for(final Item item : _items) {
        String _genHtml = this.genHtml(item, false, "");
        _builder.append(_genHtml, "");
        _builder.newLineIfNotEmpty();
      }
    }
    String body = _builder.toString();
    String _title = survey.getTitle();
    String _description = survey.getDescription();
    String template = PhpTemplate.template(_title, _description, body);
    String _xifexpression = null;
    String _name = survey.getName();
    boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
    if (_isNullOrEmpty) {
      _xifexpression = "index";
    } else {
      String _name_1 = survey.getName();
      _xifexpression = _name_1;
    }
    final String filename = (_xifexpression + ".php");
    fsa.generateFile(filename, template);
  }
  
  public String getUniqueId(final Question question) {
    int _plus = (this.nextId + 1);
    this.nextId = _plus;
    String id = ("input" + Integer.valueOf(this.nextId));
    this.idMap.put(question, id);
    return id;
  }
  
  protected String _genHtml(final Group group, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      String _xifexpression = null;
      String _name = group.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        _xifexpression = pid;
      } else {
        String _plus = (pid + ".");
        String _name_1 = group.getName();
        String _plus_1 = (_plus + _name_1);
        _xifexpression = _plus_1;
      }
      final String refId = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"group\" ");
      CharSequence _genDependsOn = this.genDependsOn(group);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      {
        String _title = group.getTitle();
        boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_title);
        boolean _not = (!_isNullOrEmpty_1);
        if (_not) {
          _builder.append("    ");
          _builder.append("<h2 class=\"page-header\">");
          String _title_1 = group.getTitle();
          _builder.append(_title_1, "    ");
          _builder.append("</h2>");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        String _description = group.getDescription();
        boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(_description);
        boolean _not_1 = (!_isNullOrEmpty_2);
        if (_not_1) {
          _builder.append("    ");
          _builder.append("<p class=\"lead\">");
          String _description_1 = group.getDescription();
          _builder.append(_description_1, "    ");
          _builder.append("</p>");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        EList<Question> _questions = group.getQuestions();
        for(final Question question : _questions) {
          _builder.append("\t");
          boolean _isRequired = group.isRequired();
          String _genHtml = this.genHtml(question, _isRequired, refId);
          _builder.append(_genHtml, "	");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  public CharSequence genDependsOn(final Item item) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _dependsOn = item.getDependsOn();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_dependsOn);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("data-depends-on=\"");
        String _dependsOn_1 = item.getDependsOn();
        String _replace = _dependsOn_1.replace(".", "___");
        _builder.append(_replace, "");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genHeader(final Question question, final boolean required) {
    CharSequence _genHeader = this.genHeader(question, required, "");
    return _genHeader;
  }
  
  public CharSequence genHeader(final Question question, final boolean required, final String extraAttributes) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<label class=\"control-label\" ");
    _builder.append(extraAttributes, "");
    _builder.append(">");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    String _title = question.getTitle();
    _builder.append(_title, "	        ");
    _builder.append(" ");
    CharSequence _genRequiredLabel = this.genRequiredLabel(question, required);
    _builder.append(_genRequiredLabel, "	        ");
    _builder.newLineIfNotEmpty();
    _builder.append("\t        ");
    {
      String _description = question.getDescription();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_description);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("<p class=\"help-block\">");
        String _description_1 = question.getDescription();
        _builder.append(_description_1, "	        ");
        _builder.append("</p>");
      }
    }
    _builder.newLineIfNotEmpty();
    _builder.append("</label>");
    _builder.newLine();
    String _get = this.idMap.get(question);
    CharSequence _genHiddenInput = this.genHiddenInput(question, _get);
    _builder.append(_genHiddenInput, "");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence genRefIdAttr(final String id, final int i) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(id);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("id=\"");
        String _substring = id.substring(1);
        String _replace = _substring.replace(".", "___");
        _builder.append(_replace, "");
        _builder.append("____");
        _builder.append(i, "");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genRefIdAttr(final String id, final Answer a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _and = false;
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(id);
      boolean _not = (!_isNullOrEmpty);
      if (!_not) {
        _and = false;
      } else {
        String _name = a.getName();
        boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_name);
        boolean _not_1 = (!_isNullOrEmpty_1);
        _and = (_not && _not_1);
      }
      if (_and) {
        _builder.append("id=\"");
        String _substring = id.substring(1);
        String _replace = _substring.replace(".", "___");
        String _plus = (_replace + "___");
        String _name_1 = a.getName();
        String _plus_1 = (_plus + _name_1);
        _builder.append(_plus_1, "");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence genRefIdAttr(final String id) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(id);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("id=\"");
        String _substring = id.substring(1);
        String _replace = _substring.replace(".", "___");
        _builder.append(_replace, "");
        _builder.append("\"");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  protected String _genHtml(final Text question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      String _xifexpression = null;
      String _name = question.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        _xifexpression = "";
      } else {
        String _plus = (pid + ".");
        String _name_1 = question.getName();
        String _plus_1 = (_plus + _name_1);
        _xifexpression = _plus_1;
      }
      final String refId = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\" ");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("for=\"");
      _builder_1.append(id, "");
      _builder_1.append("\"");
      CharSequence _genHeader = this.genHeader(question, required, _builder_1.toString());
      _builder.append(_genHeader, "	");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("<div class=\"row\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<div class=\"col-xs-4\">");
      _builder.newLine();
      {
        boolean _isMultiline = question.isMultiline();
        boolean _not = (!_isMultiline);
        if (_not) {
          _builder.append("\t\t\t");
          _builder.append("<input class=\"form-control\" ");
          CharSequence _genRefIdAttr = this.genRefIdAttr(refId);
          _builder.append(_genRefIdAttr, "			");
          _builder.append(" name=\"");
          _builder.append(id, "			");
          _builder.append("\" ");
          CharSequence _genRequiredAttr = this.genRequiredAttr(question, required);
          _builder.append(_genRequiredAttr, "			");
          _builder.append(">");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t\t");
          _builder.append("<textarea class=\"form-control\" ");
          CharSequence _genRefIdAttr_1 = this.genRefIdAttr(refId);
          _builder.append(_genRefIdAttr_1, "			");
          _builder.append(" name=\"");
          _builder.append(id, "			");
          _builder.append("\" rows=\"3\" ");
          CharSequence _genRequiredAttr_1 = this.genRequiredAttr(question, required);
          _builder.append(_genRequiredAttr_1, "			");
          _builder.append("></textarea>");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("        ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Scale question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      final String id = this.getUniqueId(question);
      String _name = question.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        question.setName(id);
      }
      String _plus = (pid + ".");
      String _name_1 = question.getName();
      final String refId = (_plus + _name_1);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\" ");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      CharSequence _genHeader = this.genHeader(question, required);
      _builder.append(_genHeader, "	");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("<table class=\"scale\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<tr class=\"top\">");
      _builder.newLine();
      {
        String _minLabel = question.getMinLabel();
        boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_minLabel);
        boolean _not = (!_isNullOrEmpty_1);
        if (_not) {
          _builder.append("        \t");
          _builder.append("<td></td>");
          _builder.newLine();
        }
      }
      {
        int _min = question.getMin();
        int _max = question.getMax();
        IntegerRange _upTo = new IntegerRange(_min, _max);
        boolean _hasElements = false;
        for(final Integer i : _upTo) {
          if (!_hasElements) {
            _hasElements = true;
            _builder.append("<td>", "            ");
          } else {
            _builder.appendImmediate("</td><td>", "            ");
          }
          _builder.append("            ");
          _builder.append("<label for=\"");
          String _substring = refId.substring(1);
          _builder.append(_substring, "            ");
          _builder.append("____");
          _builder.append(i, "            ");
          _builder.append("\">");
          _builder.append(i, "            ");
          _builder.append("</label>");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements) {
          _builder.append("</td>", "            ");
        }
      }
      {
        String _minLabel_1 = question.getMinLabel();
        boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(_minLabel_1);
        boolean _not_1 = (!_isNullOrEmpty_2);
        if (_not_1) {
          _builder.append("        \t");
          _builder.append("<td></td>");
          _builder.newLine();
        }
      }
      _builder.append("        ");
      _builder.append("</tr>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<tr class=\"bottom\">");
      _builder.newLine();
      {
        String _minLabel_2 = question.getMinLabel();
        boolean _isNullOrEmpty_3 = StringExtensions.isNullOrEmpty(_minLabel_2);
        boolean _not_2 = (!_isNullOrEmpty_3);
        if (_not_2) {
          _builder.append("        \t");
          _builder.append("<td><label for=\"");
          String _substring_1 = refId.substring(1);
          _builder.append(_substring_1, "        	");
          _builder.append("____");
          int _min_1 = question.getMin();
          _builder.append(_min_1, "        	");
          _builder.append("\">");
          String _minLabel_3 = question.getMinLabel();
          _builder.append(_minLabel_3, "        	");
          _builder.append("</label></td>");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        int _min_2 = question.getMin();
        int _max_1 = question.getMax();
        IntegerRange _upTo_1 = new IntegerRange(_min_2, _max_1);
        boolean _hasElements_1 = false;
        for(final Integer i_1 : _upTo_1) {
          if (!_hasElements_1) {
            _hasElements_1 = true;
            _builder.append("<td>", "            ");
          } else {
            _builder.appendImmediate("</td><td>", "            ");
          }
          _builder.append("            ");
          _builder.append("<input type=\"radio\" name=\"");
          _builder.append(id, "            ");
          _builder.append("\" ");
          CharSequence _genRefIdAttr = this.genRefIdAttr(refId, (i_1).intValue());
          _builder.append(_genRefIdAttr, "            ");
          _builder.append(" value=\"");
          _builder.append(i_1, "            ");
          _builder.append("\" ");
          CharSequence _genRequiredAttr = this.genRequiredAttr(question, required);
          _builder.append(_genRequiredAttr, "            ");
          _builder.append("/>");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements_1) {
          _builder.append("</td>", "            ");
        }
      }
      {
        String _minLabel_4 = question.getMinLabel();
        boolean _isNullOrEmpty_4 = StringExtensions.isNullOrEmpty(_minLabel_4);
        boolean _not_3 = (!_isNullOrEmpty_4);
        if (_not_3) {
          _builder.append("        \t");
          _builder.append("<td><label for=\"");
          String _substring_2 = refId.substring(1);
          _builder.append(_substring_2, "        	");
          _builder.append("____");
          int _max_2 = question.getMax();
          _builder.append(_max_2, "        	");
          _builder.append("\">");
          String _maxLabel = question.getMaxLabel();
          _builder.append(_maxLabel, "        	");
          _builder.append("</label></td>");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("        ");
      _builder.append("</tr>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</table>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  public String genDateFormat(final Date question) {
    ArrayList<String> _arrayList = new ArrayList<String>();
    ArrayList<String> list = _arrayList;
    boolean _isDay = question.isDay();
    if (_isDay) {
      list.add("dd");
    }
    boolean _isMonth = question.isMonth();
    if (_isMonth) {
      list.add("mm");
    }
    boolean _isYear = question.isYear();
    if (_isYear) {
      list.add("yyyy");
    }
    return IterableExtensions.join(list, "/");
  }
  
  public Integer genDateMinViewMode(final Date question) {
    Integer _xblockexpression = null;
    {
      boolean _isDay = question.isDay();
      if (_isDay) {
        return 0;
      }
      boolean _isMonth = question.isMonth();
      if (_isMonth) {
        return 1;
      }
      Integer _xifexpression = null;
      boolean _isYear = question.isYear();
      if (_isYear) {
        return 2;
      }
      _xblockexpression = (_xifexpression);
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Date question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      final String id = this.getUniqueId(question);
      String _xifexpression = null;
      String _name = question.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        _xifexpression = "";
      } else {
        String _plus = (pid + ".");
        String _name_1 = question.getName();
        String _plus_1 = (_plus + _name_1);
        _xifexpression = _plus_1;
      }
      final String refId = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\" ");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("for=\"");
      _builder_1.append(id, "");
      _builder_1.append("\"");
      CharSequence _genHeader = this.genHeader(question, required, _builder_1.toString());
      _builder.append(_genHeader, "	");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("<div class=\"row\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<div class=\"col-xs-4\">");
      _builder.newLine();
      _builder.append("\t\t    ");
      _builder.append("<div class=\"input-group date\"");
      _builder.newLine();
      _builder.append("\t\t    \t");
      _builder.append("data-date-format=\"");
      String _genDateFormat = this.genDateFormat(question);
      _builder.append(_genDateFormat, "		    	");
      _builder.append("\"");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t    \t");
      _builder.append("data-date-min-view-mode=\"");
      Integer _genDateMinViewMode = this.genDateMinViewMode(question);
      _builder.append(_genDateMinViewMode, "		    	");
      _builder.append("\"");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t    \t");
      {
        String _start = question.getStart();
        boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_start);
        boolean _not = (!_isNullOrEmpty_1);
        if (_not) {
          _builder.append("data-date-start-date=\"");
          String _start_1 = question.getStart();
          _builder.append(_start_1, "		    	");
          _builder.append("\"");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t    \t");
      {
        String _end = question.getEnd();
        boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(_end);
        boolean _not_1 = (!_isNullOrEmpty_2);
        if (_not_1) {
          _builder.append("data-date-end-date=\"");
          String _end_1 = question.getEnd();
          _builder.append(_end_1, "		    	");
          _builder.append("\"");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t    \t");
      _builder.append(">");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("<input ");
      CharSequence _genRefIdAttr = this.genRefIdAttr(refId);
      _builder.append(_genRefIdAttr, "				");
      _builder.append(" name=\"");
      _builder.append(id, "				");
      _builder.append("\" type=\"text\" class=\"form-control\" ");
      CharSequence _genRequiredAttr = this.genRequiredAttr(question, required);
      _builder.append(_genRequiredAttr, "				");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t\t\t\t");
      _builder.append("<span class=\"input-group-addon\">");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("<i class=\"glyphicon glyphicon-calendar\"></i>");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("</span>");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("</div>");
      _builder.newLine();
      {
        boolean _isShowLimits = question.isShowLimits();
        if (_isShowLimits) {
          _builder.append("\t\t");
          CharSequence _genLimitsDesc = this.genLimitsDesc(question);
          _builder.append(_genLimitsDesc, "		");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final survey.Number question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      String _xifexpression = null;
      String _name = question.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        _xifexpression = "";
      } else {
        String _plus = (pid + ".");
        String _name_1 = question.getName();
        String _plus_1 = (_plus + _name_1);
        _xifexpression = _plus_1;
      }
      final String refId = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\" ");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t    \t");
      StringConcatenation _builder_1 = new StringConcatenation();
      _builder_1.append("for=\"");
      _builder_1.append(id, "");
      _builder_1.append("\"");
      CharSequence _genHeader = this.genHeader(question, required, _builder_1.toString());
      _builder.append(_genHeader, "	    	");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("<div class=\"row\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<div class=\"col-xs-2\">");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<input type=\"number\" class=\"form-control\"  ");
      CharSequence _genRefIdAttr = this.genRefIdAttr(refId);
      _builder.append(_genRefIdAttr, "            ");
      _builder.append(" name=\"");
      _builder.append(id, "            ");
      _builder.append("\" ");
      CharSequence _genRequiredAttr = this.genRequiredAttr(question, required);
      _builder.append(_genRequiredAttr, "            ");
      _builder.append(" step=\"1\"");
      _builder.newLineIfNotEmpty();
      {
        Integer _min = question.getMin();
        boolean _notEquals = (!Objects.equal(_min, null));
        if (_notEquals) {
          _builder.append("            ");
          _builder.append("min=\"");
          Integer _min_1 = question.getMin();
          _builder.append(_min_1, "            ");
          _builder.append("\"");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        Integer _max = question.getMax();
        boolean _notEquals_1 = (!Objects.equal(_max, null));
        if (_notEquals_1) {
          _builder.append("            ");
          _builder.append("max=\"");
          Integer _max_1 = question.getMax();
          _builder.append(_max_1, "            ");
          _builder.append("\"");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("            ");
      _builder.append(">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      {
        boolean _isShowLimits = question.isShowLimits();
        if (_isShowLimits) {
          _builder.append("            ");
          CharSequence _genLimitsDesc = this.genLimitsDesc(question);
          _builder.append(_genLimitsDesc, "            ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Single question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      int i = 0;
      String _xifexpression = null;
      String _name = question.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        _xifexpression = "";
      } else {
        String _plus = (pid + ".");
        String _name_1 = question.getName();
        String _plus_1 = (_plus + _name_1);
        _xifexpression = _plus_1;
      }
      final String refId = _xifexpression;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\" ");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t    \t");
      CharSequence _genHeader = this.genHeader(question, required);
      _builder.append(_genHeader, "	    	");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("<div>");
      _builder.newLine();
      {
        ArrayList<Answer> _answers = this.getAnswers(question);
        boolean _hasElements = false;
        for(final Answer a : _answers) {
          if (!_hasElements) {
            _hasElements = true;
            _builder.append("<div class=\"radio\"><label>", "		");
          } else {
            _builder.appendImmediate("</label></div><div class=\"radio\"><label>", "		");
          }
          _builder.append("\t\t");
          _builder.append("<input type=\"radio\" name=\"");
          _builder.append(id, "		");
          _builder.append("\"  ");
          CharSequence _genRefIdAttr = this.genRefIdAttr(refId, a);
          _builder.append(_genRefIdAttr, "		");
          _builder.append(" value=\"");
          String _title = a.getTitle();
          _builder.append(_title, "		");
          _builder.append("\" ");
          CharSequence _genRequiredAttr = this.genRequiredAttr(question, required);
          _builder.append(_genRequiredAttr, "		");
          _builder.append("/>");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          String _title_1 = a.getTitle();
          _builder.append(_title_1, "		");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements) {
          _builder.append("</label></div>", "		");
        }
      }
      {
        boolean _or = false;
        boolean _isOther = question.isOther();
        if (_isOther) {
          _or = true;
        } else {
          String _otherLabel = question.getOtherLabel();
          boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_otherLabel);
          boolean _not = (!_isNullOrEmpty_1);
          _or = (_isOther || _not);
        }
        if (_or) {
          _builder.append("\t\t");
          _builder.append("<div class=\"radio\">");
          _builder.newLine();
          _builder.append("\t\t");
          _builder.append("<input type=\"radio\" name=\"");
          _builder.append(id, "		");
          _builder.append("\" value=\"");
          _builder.append(id, "		");
          _builder.append("_");
          int _plus_2 = (i + 1);
          int _i = i = _plus_2;
          _builder.append(_i, "		");
          _builder.append("_other\" ");
          CharSequence _genRequiredAttr_1 = this.genRequiredAttr(question, required);
          _builder.append(_genRequiredAttr_1, "		");
          _builder.append("/>");
          _builder.newLineIfNotEmpty();
          {
            String _otherLabel_1 = question.getOtherLabel();
            boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(_otherLabel_1);
            boolean _not_1 = (!_isNullOrEmpty_2);
            if (_not_1) {
              _builder.append("\t\t");
              String _otherLabel_2 = question.getOtherLabel();
              _builder.append(_otherLabel_2, "		");
              _builder.append(":");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t\t");
              _builder.append("Other:");
              _builder.newLine();
            }
          }
          _builder.append("\t\t");
          _builder.append("<input class=\"other-option\" type=\"text\" name=\"");
          _builder.append(id, "		");
          _builder.append("_");
          _builder.append(i, "		");
          _builder.append("_other\"/>");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t");
          _builder.append("</div>");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Multiple question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      final String id = this.getUniqueId(question);
      final Integer min = this.getMin(question, required);
      final Integer max = this.getMax(question, required);
      String _xifexpression = null;
      String _name = question.getName();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
      if (_isNullOrEmpty) {
        _xifexpression = "";
      } else {
        String _plus = (pid + ".");
        String _name_1 = question.getName();
        String _plus_1 = (_plus + _name_1);
        _xifexpression = _plus_1;
      }
      final String refId = _xifexpression;
      final ArrayList<Answer> answers = this.getAnswers(question);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\"");
      _builder.newLine();
      _builder.append("\t");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "	");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      {
        boolean _greaterThan = ((min).intValue() > 0);
        if (_greaterThan) {
          _builder.append(" data-min-selections=\"");
          _builder.append(min, "	");
          _builder.append("\" ");
        }
      }
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      {
        boolean _notEquals = (!Objects.equal(max, null));
        if (_notEquals) {
          _builder.append(" data-max-selections=\"");
          _builder.append(max, "	");
          _builder.append("\" ");
        }
      }
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t    \t");
      CharSequence _genHeader = this.genHeader(question, required);
      _builder.append(_genHeader, "	    	");
      _builder.newLineIfNotEmpty();
      {
        boolean _hasElements = false;
        for(final Answer a : answers) {
          if (!_hasElements) {
            _hasElements = true;
            _builder.append("<div class=\"checkbox\"><label>", "    ");
          } else {
            _builder.appendImmediate("</label></div><div class=\"checkbox\"><label>", "    ");
          }
          _builder.append("    ");
          _builder.append("<input type=\"checkbox\" name=\"");
          _builder.append(id, "    ");
          _builder.append("[]\" ");
          CharSequence _genRefIdAttr = this.genRefIdAttr(refId, a);
          _builder.append(_genRefIdAttr, "    ");
          _builder.append(" value=\"");
          String _title = a.getTitle();
          _builder.append(_title, "    ");
          _builder.append("\"> ");
          String _title_1 = a.getTitle();
          _builder.append(_title_1, "    ");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements) {
          _builder.append("</label></div>", "    ");
        }
      }
      {
        boolean _or = false;
        boolean _isOther = question.isOther();
        if (_isOther) {
          _or = true;
        } else {
          String _otherLabel = question.getOtherLabel();
          boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_otherLabel);
          boolean _not = (!_isNullOrEmpty_1);
          _or = (_isOther || _not);
        }
        if (_or) {
          _builder.append("\t");
          _builder.append("<div class=\"checkbox\">");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("<input type=\"checkbox\" name=\"");
          _builder.append(id, "	");
          _builder.append("[]\" value=\"");
          _builder.append(id, "	");
          _builder.append("_");
          int _size = answers.size();
          _builder.append(_size, "	");
          _builder.append("_other\" ");
          CharSequence _genRequiredAttr = this.genRequiredAttr(question, required);
          _builder.append(_genRequiredAttr, "	");
          _builder.append("/>");
          _builder.newLineIfNotEmpty();
          {
            String _otherLabel_1 = question.getOtherLabel();
            boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(_otherLabel_1);
            boolean _not_1 = (!_isNullOrEmpty_2);
            if (_not_1) {
              _builder.append("\t");
              String _otherLabel_2 = question.getOtherLabel();
              _builder.append(_otherLabel_2, "	");
              _builder.append(":");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("Other:");
              _builder.newLine();
            }
          }
          _builder.append("\t");
          _builder.append("<input class=\"other-option\" type=\"text\" name=\"");
          _builder.append(id, "	");
          _builder.append("_");
          int _size_1 = answers.size();
          _builder.append(_size_1, "	");
          _builder.append("_other\"/>");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("</div>");
          _builder.newLine();
        }
      }
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Table question, final boolean required, final String pid) {
    String _xblockexpression = null;
    {
      final ArrayList<Answer> answers = this.getAnswers(question);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\" ");
      CharSequence _genDependsOn = this.genDependsOn(question);
      _builder.append(_genDependsOn, "");
      _builder.append(">");
      _builder.newLineIfNotEmpty();
      _builder.append("\t    \t");
      CharSequence _genHeader = this.genHeader(question, required);
      _builder.append(_genHeader, "	    	");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("<table class=\"table table-striped\">");
      _builder.newLine();
      _builder.append("    \t");
      _builder.append("<thead>");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("<tr>");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("<th></th>");
      _builder.newLine();
      {
        for(final Answer a : answers) {
          _builder.append("\t\t\t\t");
          _builder.append("<th>");
          String _title = a.getTitle();
          _builder.append(_title, "				");
          _builder.append("</th>");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t\t\t");
      _builder.append("</tr>");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("</thead>");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("<tbody>");
      _builder.newLine();
      {
        EList<TableQuestion> _questions = question.getQuestions();
        for(final TableQuestion q : _questions) {
          _builder.append("\t\t\t");
          _builder.append("<tr>");
          _builder.newLine();
          _builder.append("\t\t\t");
          _builder.append("    ");
          _builder.append("<td><label for=\"");
          String qid = this.getUniqueId(question);
          _builder.append("\">");
          String _title_1 = q.getTitle();
          _builder.append(_title_1, "			    ");
          _builder.append("</label></td>");
          _builder.newLineIfNotEmpty();
          {
            for(final Answer a_1 : answers) {
              _builder.append("\t\t\t");
              _builder.append("    ");
              _builder.append("<td><input type=\"");
              {
                boolean _isMultiple = question.isMultiple();
                if (_isMultiple) {
                  _builder.append("checkbox");
                } else {
                  _builder.append("radio");
                }
              }
              _builder.append("\" name=\"");
              _builder.append(qid, "			    ");
              _builder.append("\"");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t");
              _builder.append("    ");
              String _xifexpression = null;
              String _name = q.getName();
              boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
              if (_isNullOrEmpty) {
                _xifexpression = pid;
              } else {
                String _plus = (pid + ".");
                String _name_1 = q.getName();
                String _plus_1 = (_plus + _name_1);
                _xifexpression = _plus_1;
              }
              CharSequence _genRefIdAttr = this.genRefIdAttr(_xifexpression, a_1);
              _builder.append(_genRefIdAttr, "			    ");
              _builder.newLineIfNotEmpty();
              _builder.append("\t\t\t");
              _builder.append("    ");
              _builder.append("\"/></td>");
              _builder.newLine();
            }
          }
          _builder.append("\t\t\t");
          _builder.append("</tr>");
          _builder.newLine();
        }
      }
      _builder.append("\t\t");
      _builder.append("</tbody>");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("</table>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Question question, final boolean required, final String pid) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("MISSING: ");
    String _title = question.getTitle();
    _builder.append(_title, "");
    _builder.append(" (");
    Class<? extends Question> _class = question.getClass();
    _builder.append(_class, "");
    _builder.append(")");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public Integer getMin(final Multiple question, final boolean required) {
    Integer _xifexpression = null;
    Integer _min = question.getMin();
    boolean _notEquals = (!Objects.equal(_min, null));
    if (_notEquals) {
      Integer _min_1 = question.getMin();
      _xifexpression = _min_1;
    } else {
      _xifexpression = Integer.valueOf(0);
    }
    Integer min = _xifexpression;
    boolean _and = false;
    boolean _or = false;
    if (required) {
      _or = true;
    } else {
      boolean _isRequired = question.isRequired();
      _or = (required || _isRequired);
    }
    if (!_or) {
      _and = false;
    } else {
      boolean _equals = ((min).intValue() == 0);
      _and = (_or && _equals);
    }
    if (_and) {
      min = Integer.valueOf(1);
    }
    return min;
  }
  
  public Integer getMax(final Multiple question, final boolean required) {
    Integer _xifexpression = null;
    Integer _max = question.getMax();
    boolean _notEquals = (!Objects.equal(_max, null));
    if (_notEquals) {
      Integer _max_1 = question.getMax();
      int _intValue = _max_1.intValue();
      _xifexpression = Integer.valueOf(_intValue);
    } else {
      _xifexpression = null;
    }
    return _xifexpression;
  }
  
  public CharSequence genRequiredLabel(final Question question, final boolean requiredParent) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _or = false;
      if (requiredParent) {
        _or = true;
      } else {
        boolean _isRequired = question.isRequired();
        _or = (requiredParent || _isRequired);
      }
      if (_or) {
        _builder.append(" * ");
      }
    }
    return _builder;
  }
  
  public CharSequence genRequiredAttr(final Question question, final boolean requiredParent) {
    StringConcatenation _builder = new StringConcatenation();
    {
      boolean _or = false;
      if (requiredParent) {
        _or = true;
      } else {
        boolean _isRequired = question.isRequired();
        _or = (requiredParent || _isRequired);
      }
      if (_or) {
        _builder.append(" required ");
      }
    }
    return _builder;
  }
  
  public CharSequence genLimitsDesc(final Date question) {
    CharSequence _xblockexpression = null;
    {
      final String start = question.getStart();
      final String end = question.getEnd();
      String s = "";
      boolean _and = false;
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(start);
      boolean _not = (!_isNullOrEmpty);
      if (!_not) {
        _and = false;
      } else {
        boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(end);
        boolean _not_1 = (!_isNullOrEmpty_1);
        _and = (_not && _not_1);
      }
      if (_and) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("The date must be between ");
        _builder.append(start, "");
        _builder.append(" and ");
        _builder.append(end, "");
        s = _builder.toString();
      } else {
        boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(start);
        boolean _not_2 = (!_isNullOrEmpty_2);
        if (_not_2) {
          StringConcatenation _builder_1 = new StringConcatenation();
          _builder_1.append("The date must be before ");
          _builder_1.append(end, "");
          s = _builder_1.toString();
        } else {
          boolean _isNullOrEmpty_3 = StringExtensions.isNullOrEmpty(end);
          boolean _not_3 = (!_isNullOrEmpty_3);
          if (_not_3) {
            StringConcatenation _builder_2 = new StringConcatenation();
            _builder_2.append("The date must be after ");
            _builder_2.append(start, "");
            s = _builder_2.toString();
          }
        }
      }
      CharSequence _xifexpression = null;
      boolean _isNullOrEmpty_4 = StringExtensions.isNullOrEmpty(s);
      boolean _not_4 = (!_isNullOrEmpty_4);
      if (_not_4) {
        StringConcatenation _builder_3 = new StringConcatenation();
        _builder_3.append("<p class=\"help-block\">");
        _builder_3.append(s, "");
        _builder_3.append("</p>");
        _xifexpression = _builder_3;
      }
      _xblockexpression = (_xifexpression);
    }
    return _xblockexpression;
  }
  
  public CharSequence genLimitsDesc(final survey.Number question) {
    CharSequence _xblockexpression = null;
    {
      final Integer min = question.getMin();
      final Integer max = question.getMax();
      String s = "";
      boolean _and = false;
      boolean _notEquals = (!Objects.equal(min, null));
      if (!_notEquals) {
        _and = false;
      } else {
        boolean _notEquals_1 = (!Objects.equal(max, null));
        _and = (_notEquals && _notEquals_1);
      }
      if (_and) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("The value must be between ");
        _builder.append(min, "");
        _builder.append(" and ");
        _builder.append(max, "");
        _builder.append(" (both included)");
        s = _builder.toString();
      } else {
        boolean _notEquals_2 = (!Objects.equal(min, null));
        if (_notEquals_2) {
          boolean _matched = false;
          if (!_matched) {
            if (Objects.equal(min,0)) {
              _matched=true;
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("The value must be non-negative");
              s = _builder_1.toString();
            }
          }
          if (!_matched) {
            if (Objects.equal(min,1)) {
              _matched=true;
              StringConcatenation _builder_2 = new StringConcatenation();
              _builder_2.append("The value must be positive");
              s = _builder_2.toString();
            }
          }
          if (!_matched) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("The value must be larger than or equal to ");
            _builder_3.append(min, "");
            s = _builder_3.toString();
          }
        } else {
          boolean _notEquals_3 = (!Objects.equal(max, null));
          if (_notEquals_3) {
            boolean _matched_1 = false;
            if (!_matched_1) {
              int _minus = (-1);
              if (Objects.equal(max,_minus)) {
                _matched_1=true;
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("The value must be negative");
                s = _builder_4.toString();
              }
            }
            if (!_matched_1) {
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("The value must be less than or equal to ");
              _builder_5.append(max, "");
              s = _builder_5.toString();
            }
          }
        }
      }
      CharSequence _xifexpression = null;
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(s);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        StringConcatenation _builder_6 = new StringConcatenation();
        _builder_6.append("<p class=\"help-block\">");
        _builder_6.append(s, "");
        _builder_6.append("</p>");
        _xifexpression = _builder_6;
      }
      _xblockexpression = (_xifexpression);
    }
    return _xblockexpression;
  }
  
  public ArrayList<Answer> getAnswers(final HasOptions hasOptions) {
    ArrayList<Answer> _arrayList = new ArrayList<Answer>();
    ArrayList<Answer> answers = _arrayList;
    EList<Option> _options = hasOptions.getOptions();
    for (final Option option : _options) {
      if ((option instanceof Answer)) {
        answers.add(((Answer) option));
      } else {
        if ((option instanceof AnswerTemplateRef)) {
          final AnswerTemplate template = ((AnswerTemplateRef) option).getTemplate();
          EList<Answer> _answers = template.getAnswers();
          for (final Answer answer : _answers) {
            {
              boolean _and = false;
              String _name = answer.getName();
              boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_name);
              boolean _not = (!_isNullOrEmpty);
              if (!_not) {
                _and = false;
              } else {
                String _name_1 = answer.getName();
                boolean _contains = _name_1.contains("___");
                boolean _not_1 = (!_contains);
                _and = (_not && _not_1);
              }
              if (_and) {
                String _name_2 = template.getName();
                String _plus = (_name_2 + "___");
                String _name_3 = answer.getName();
                String _plus_1 = (_plus + _name_3);
                answer.setName(_plus_1);
              }
              answers.add(answer);
            }
          }
        }
      }
    }
    return answers;
  }
  
  public CharSequence genHiddenInput(final Question question, final String id) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<input type=\"hidden\" name=\"");
    _builder.append(id, "");
    _builder.append("_question\" value=\"");
    String _title = question.getTitle();
    _builder.append(_title, "");
    _builder.append("\" />");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public void genLatex(final Survey survey, final IFileSystemAccess fsa) {
    fsa.generateFile("survey.tex", "Something something");
  }
  
  public String genHtml(final Item question, final boolean required, final String pid) {
    if (question instanceof Date) {
      return _genHtml((Date)question, required, pid);
    } else if (question instanceof Multiple) {
      return _genHtml((Multiple)question, required, pid);
    } else if (question instanceof survey.Number) {
      return _genHtml((survey.Number)question, required, pid);
    } else if (question instanceof Scale) {
      return _genHtml((Scale)question, required, pid);
    } else if (question instanceof Single) {
      return _genHtml((Single)question, required, pid);
    } else if (question instanceof Table) {
      return _genHtml((Table)question, required, pid);
    } else if (question instanceof Text) {
      return _genHtml((Text)question, required, pid);
    } else if (question instanceof Group) {
      return _genHtml((Group)question, required, pid);
    } else if (question instanceof Question) {
      return _genHtml((Question)question, required, pid);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(question, required, pid).toString());
    }
  }
}
