/**
 * generated by Xtext
 */
package dk.itu.smdp.survey.generator;

import com.google.common.base.Objects;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.xbase.lib.Functions.Function0;
import org.eclipse.xtext.xbase.lib.IntegerRange;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import survey.Answer;
import survey.AnswerTemplate;
import survey.AnswerTemplateRef;
import survey.Date;
import survey.Group;
import survey.HasOptions;
import survey.Item;
import survey.Meta;
import survey.Option;
import survey.Question;
import survey.Scale;
import survey.Single;
import survey.Survey;
import survey.Text;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class DslGenerator implements IGenerator {
  private int nextId = 0;
  
  private HashMap<Question,String> idMap = new Function0<HashMap<Question,String>>() {
    public HashMap<Question,String> apply() {
      HashMap<Question,String> _hashMap = new HashMap<Question, String>();
      return _hashMap;
    }
  }.apply();
  
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    EList<EObject> _contents = resource.getContents();
    EObject _head = IterableExtensions.<EObject>head(_contents);
    Survey survey = ((Survey) _head);
    this.genHtml(survey, fsa);
    this.genLatex(survey, fsa);
  }
  
  public void genHtml(final Survey survey, final IFileSystemAccess fsa) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<!DOCTYPE html>");
    _builder.newLine();
    _builder.append("<html lang=\"en\">");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<head>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<meta charset=\"utf-8\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<title>");
    String _title = survey.getTitle();
    _builder.append(_title, "        ");
    _builder.append("</title>");
    _builder.newLineIfNotEmpty();
    _builder.append("        ");
    _builder.append("<!-- Bootstrap -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<style media=\"screen\" type=\"text/css\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append(".group { margin-bottom: 20px; margin-top: 50px; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("input[type=number] { text-align: right; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("h2 + p.lead { font-size: 21px; margin-bottom: 30px; margin-top: -15px; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("label.control-label { font-size: 16px; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("label .help-block { font-size: 85%; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("table.scale td { padding: 8px; text-align: center; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("table.scale .top td { padding-bottom: 0; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("table.scale .bottom { border-top: 1px solid #DDD; border-bottom: 1px solid #DDD; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("form .form-group + .form-group { padding-top: 15px; }");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("form hr { margin-top: 30px; }");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</style>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!-- WARNING: Respond.js doesn\'t work if you view the page via file:// -->");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<!--[if lt IE 9]>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<script src=\"//oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js\"></script>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<script src=\"//oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js\"></script>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("<![endif]-->");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("</head>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<body>");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("<div class=\"container\">");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("<div class=\"row\">");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("<div> <h1>");
    String _title_1 = survey.getTitle();
    _builder.append(_title_1, "                ");
    _builder.append("</h1> <p class=\"lead\">");
    String _description = survey.getDescription();
    _builder.append(_description, "                ");
    _builder.append("</p> </div>");
    _builder.newLineIfNotEmpty();
    _builder.append("                ");
    _builder.append("<form role=\"form\">");
    _builder.newLine();
    {
      EList<Item> _items = survey.getItems();
      for(final Item item : _items) {
        _builder.append("\t\t\t\t\t");
        String _genHtml = this.genHtml(item);
        _builder.append(_genHtml, "					");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("                    ");
    _builder.append("<hr/>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("<div class=\"form-group\">");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<button type=\"submit\" class=\"btn btn-success btn-lg\">Submit</button>");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("<button type=\"reset\" class=\"btn btn-danger btn-lg\">Reset</button>");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("</form>");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("</div>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</body>");
    _builder.newLine();
    _builder.append("</html>");
    _builder.newLine();
    String template = _builder.toString();
    fsa.generateFile("survey.html", template);
  }
  
  public String getUniqueId(final Question question) {
    int _plus = (this.nextId + 1);
    this.nextId = _plus;
    String id = ("input" + Integer.valueOf(this.nextId));
    this.idMap.put(question, id);
    return id;
  }
  
  protected String _genHtml(final Group group) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<div class=\"group\">");
    _builder.newLine();
    {
      String _title = group.getTitle();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_title);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("    ");
        _builder.append("<h2 id=\"grid\" class=\"page-header\">");
        String _title_1 = group.getTitle();
        _builder.append(_title_1, "    ");
        _builder.append("</h2>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      String _description = group.getDescription();
      boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_description);
      boolean _not_1 = (!_isNullOrEmpty_1);
      if (_not_1) {
        _builder.append("    ");
        _builder.append("<p class=\"lead\">");
        String _description_1 = group.getDescription();
        _builder.append(_description_1, "    ");
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Question> _questions = group.getQuestions();
      for(final Question question : _questions) {
        _builder.append("\t");
        String _genHtml = this.genHtml(question);
        _builder.append(_genHtml, "	");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("</div>");
    _builder.newLine();
    return _builder.toString();
  }
  
  protected String _genHtml(final Text question) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<label for=\"");
      _builder.append(id, "    ");
      _builder.append("\" class=\"control-label\">");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      String _title = question.getTitle();
      _builder.append(_title, "        ");
      _builder.append(" ");
      CharSequence _genRequiredLabel = this.genRequiredLabel(question);
      _builder.append(_genRequiredLabel, "        ");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      CharSequence _genQuestionDesc = this.genQuestionDesc(question);
      _builder.append(_genQuestionDesc, "        ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("</label>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<div class=\"row\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<div class=\"col-xs-4\">");
      _builder.newLine();
      {
        boolean _isMultiline = question.isMultiline();
        boolean _not = (!_isMultiline);
        if (_not) {
          _builder.append("\t\t\t");
          _builder.append("<input class=\"form-control\" id=\"");
          _builder.append(id, "			");
          _builder.append("\" ");
          CharSequence _genRequiredAttr = this.genRequiredAttr(question);
          _builder.append(_genRequiredAttr, "			");
          _builder.append(" ");
          CharSequence _genRequiredAttr_1 = this.genRequiredAttr(question);
          _builder.append(_genRequiredAttr_1, "			");
          _builder.append(">");
          _builder.newLineIfNotEmpty();
        } else {
          _builder.append("\t\t\t");
          _builder.append("<textarea class=\"form-control\" id=\"");
          _builder.append(id, "			");
          _builder.append("\" ");
          CharSequence _genRequiredAttr_2 = this.genRequiredAttr(question);
          _builder.append(_genRequiredAttr_2, "			");
          _builder.append(" rows=\"3\" ");
          CharSequence _genRequiredAttr_3 = this.genRequiredAttr(question);
          _builder.append(_genRequiredAttr_3, "			");
          _builder.append("></textarea>");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("        ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Scale question) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"group\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<div class=\"form-group\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<label class=\"control-label\">");
      _builder.newLine();
      _builder.append("\t        ");
      String _title = question.getTitle();
      _builder.append(_title, "	        ");
      _builder.append(" ");
      CharSequence _genRequiredLabel = this.genRequiredLabel(question);
      _builder.append(_genRequiredLabel, "	        ");
      _builder.newLineIfNotEmpty();
      _builder.append("\t        ");
      CharSequence _genQuestionDesc = this.genQuestionDesc(question);
      _builder.append(_genQuestionDesc, "	        ");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      _builder.append("</label>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<table class=\"scale\">");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<tr class=\"top\">");
      _builder.newLine();
      {
        String _lowerLabel = question.getLowerLabel();
        boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_lowerLabel);
        boolean _not = (!_isNullOrEmpty);
        if (_not) {
          _builder.append("            \t");
          _builder.append("<td></td>");
          _builder.newLine();
        }
      }
      {
        int _lower = question.getLower();
        int _upper = question.getUpper();
        IntegerRange _upTo = new IntegerRange(_lower, _upper);
        boolean _hasElements = false;
        for(final Integer i : _upTo) {
          if (!_hasElements) {
            _hasElements = true;
            _builder.append("<td>", "                ");
          } else {
            _builder.appendImmediate("</td><td>", "                ");
          }
          _builder.append("                ");
          _builder.append("<label for=\"");
          _builder.append(id, "                ");
          _builder.append("_");
          _builder.append(i, "                ");
          _builder.append("\">");
          _builder.append(i, "                ");
          _builder.append("</label>");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements) {
          _builder.append("</td>", "                ");
        }
      }
      {
        String _lowerLabel_1 = question.getLowerLabel();
        boolean _isNullOrEmpty_1 = StringExtensions.isNullOrEmpty(_lowerLabel_1);
        boolean _not_1 = (!_isNullOrEmpty_1);
        if (_not_1) {
          _builder.append("            \t");
          _builder.append("<td></td>");
          _builder.newLine();
        }
      }
      _builder.append("            ");
      _builder.append("</tr>");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<tr class=\"bottom\">");
      _builder.newLine();
      {
        String _lowerLabel_2 = question.getLowerLabel();
        boolean _isNullOrEmpty_2 = StringExtensions.isNullOrEmpty(_lowerLabel_2);
        boolean _not_2 = (!_isNullOrEmpty_2);
        if (_not_2) {
          _builder.append("            \t");
          _builder.append("<td><label for=\"");
          _builder.append(id, "            	");
          _builder.append("_");
          int _lower_1 = question.getLower();
          _builder.append(_lower_1, "            	");
          _builder.append("\">");
          String _lowerLabel_3 = question.getLowerLabel();
          _builder.append(_lowerLabel_3, "            	");
          _builder.append("</label></td>");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        int _lower_2 = question.getLower();
        int _upper_1 = question.getUpper();
        IntegerRange _upTo_1 = new IntegerRange(_lower_2, _upper_1);
        boolean _hasElements_1 = false;
        for(final Integer i_1 : _upTo_1) {
          if (!_hasElements_1) {
            _hasElements_1 = true;
            _builder.append("<td>", "                ");
          } else {
            _builder.appendImmediate("</td><td>", "                ");
          }
          _builder.append("                ");
          _builder.append("<input type=\"radio\" name=\"");
          _builder.append(id, "                ");
          _builder.append("\" id=\"");
          _builder.append(id, "                ");
          _builder.append("_");
          _builder.append(i_1, "                ");
          _builder.append("\" value=\"");
          _builder.append(i_1, "                ");
          _builder.append("\" ");
          CharSequence _genRequiredAttr = this.genRequiredAttr(question);
          _builder.append(_genRequiredAttr, "                ");
          _builder.append("/>");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements_1) {
          _builder.append("</td>", "                ");
        }
      }
      {
        String _lowerLabel_4 = question.getLowerLabel();
        boolean _isNullOrEmpty_3 = StringExtensions.isNullOrEmpty(_lowerLabel_4);
        boolean _not_3 = (!_isNullOrEmpty_3);
        if (_not_3) {
          _builder.append("            \t");
          _builder.append("<td><label for=\"");
          _builder.append(id, "            	");
          _builder.append("_");
          int _upper_2 = question.getUpper();
          _builder.append(_upper_2, "            	");
          _builder.append("\">");
          String _upperLabel = question.getUpperLabel();
          _builder.append(_upperLabel, "            	");
          _builder.append("</label></td>");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("            ");
      _builder.append("</tr>");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</table>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Date question) {
    return null;
  }
  
  protected String _genHtml(final survey.Number question) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<label for=\"");
      _builder.append(id, "    ");
      _builder.append("\" class=\"control-label\">");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      String _title = question.getTitle();
      _builder.append(_title, "        ");
      _builder.append(" ");
      CharSequence _genRequiredLabel = this.genRequiredLabel(question);
      _builder.append(_genRequiredLabel, "        ");
      _builder.newLineIfNotEmpty();
      _builder.append("        ");
      CharSequence _genQuestionDesc = this.genQuestionDesc(question);
      _builder.append(_genQuestionDesc, "        ");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("</label>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<div class=\"row\">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("<div class=\"col-xs-2\">");
      _builder.newLine();
      _builder.append("            ");
      _builder.append("<input type=\"number\" class=\"form-control\" id=\"");
      _builder.append(id, "            ");
      _builder.append("\" ");
      CharSequence _genRequiredAttr = this.genRequiredAttr(question);
      _builder.append(_genRequiredAttr, "            ");
      _builder.append(" step=\"1\"");
      _builder.newLineIfNotEmpty();
      {
        Integer _lower = question.getLower();
        boolean _notEquals = (!Objects.equal(_lower, null));
        if (_notEquals) {
          _builder.append("            ");
          _builder.append("min=\"");
          Integer _lower_1 = question.getLower();
          _builder.append(_lower_1, "            ");
          _builder.append("\"");
          _builder.newLineIfNotEmpty();
        }
      }
      {
        Integer _upper = question.getUpper();
        boolean _notEquals_1 = (!Objects.equal(_upper, null));
        if (_notEquals_1) {
          _builder.append("            ");
          _builder.append("max=\"");
          Integer _upper_1 = question.getUpper();
          _builder.append(_upper_1, "            ");
          _builder.append("\"");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("            ");
      _builder.append(">");
      _builder.newLine();
      _builder.append("        ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      {
        boolean _isShowLimits = question.isShowLimits();
        if (_isShowLimits) {
          _builder.append("            ");
          CharSequence _genLimitsDesc = this.genLimitsDesc(question);
          _builder.append(_genLimitsDesc, "            ");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Single question) {
    String _xblockexpression = null;
    {
      String id = this.getUniqueId(question);
      int i = 0;
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("<div class=\"form-group\">");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<label class=\"control-label\">");
      _builder.newLine();
      _builder.append("    \t");
      String _title = question.getTitle();
      _builder.append(_title, "    	");
      _builder.newLineIfNotEmpty();
      _builder.append("    \t");
      CharSequence _genQuestionDesc = this.genQuestionDesc(question);
      _builder.append(_genQuestionDesc, "    	");
      _builder.newLineIfNotEmpty();
      _builder.append("    ");
      _builder.append("</label>");
      _builder.newLine();
      _builder.append("    ");
      _builder.append("<div>");
      _builder.newLine();
      {
        ArrayList<Answer> _answers = this.getAnswers(question);
        boolean _hasElements = false;
        for(final Answer a : _answers) {
          if (!_hasElements) {
            _hasElements = true;
            _builder.append("<div class=\"radio\"><label>", "    	");
          } else {
            _builder.appendImmediate("</label></div><div class=\"radio\"><label>", "    	");
          }
          _builder.append("    \t");
          _builder.append("<input type=\"radio\" name=\"");
          _builder.append(id, "    	");
          _builder.append("\" id=\"");
          _builder.append(id, "    	");
          _builder.append("_");
          _builder.append(i, "    	");
          _builder.append("\" value=\"");
          _builder.append(i, "    	");
          _builder.append("\" />");
          _builder.newLineIfNotEmpty();
          _builder.append("\t\t        ");
          String _label = a.getLabel();
          _builder.append(_label, "		        ");
          _builder.newLineIfNotEmpty();
        }
        if (_hasElements) {
          _builder.append("</label></div>", "    	");
        }
      }
      _builder.append("    ");
      _builder.append("</div>");
      _builder.newLine();
      _builder.append("</div>");
      _builder.newLine();
      _xblockexpression = (_builder.toString());
    }
    return _xblockexpression;
  }
  
  protected String _genHtml(final Question question) {
    StringConcatenation _builder = new StringConcatenation();
    String _title = question.getTitle();
    _builder.append(_title, "");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public CharSequence genRequiredLabel(final Question question) {
    CharSequence _xblockexpression = null;
    {
      boolean required = question.isRequired();
      StringConcatenation _builder = new StringConcatenation();
      {
        if (required) {
          _builder.append("*");
          _builder.newLine();
        }
      }
      _xblockexpression = (_builder);
    }
    return _xblockexpression;
  }
  
  public CharSequence genRequiredAttr(final Question question) {
    CharSequence _xblockexpression = null;
    {
      boolean required = question.isRequired();
      StringConcatenation _builder = new StringConcatenation();
      {
        if (required) {
          _builder.append("required");
          _builder.newLine();
        }
      }
      _xblockexpression = (_builder);
    }
    return _xblockexpression;
  }
  
  public CharSequence genLimitsDesc(final survey.Number question) {
    CharSequence _xblockexpression = null;
    {
      Integer min = question.getLower();
      Integer max = question.getUpper();
      String s = "";
      boolean _and = false;
      boolean _notEquals = (!Objects.equal(min, null));
      if (!_notEquals) {
        _and = false;
      } else {
        boolean _notEquals_1 = (!Objects.equal(max, null));
        _and = (_notEquals && _notEquals_1);
      }
      if (_and) {
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("The value must be between ");
        _builder.append(min, "");
        _builder.append(" and ");
        _builder.append(max, "");
        _builder.append(" (both included)");
        s = _builder.toString();
      } else {
        boolean _notEquals_2 = (!Objects.equal(min, null));
        if (_notEquals_2) {
          boolean _matched = false;
          if (!_matched) {
            if (Objects.equal(min,0)) {
              _matched=true;
              StringConcatenation _builder_1 = new StringConcatenation();
              _builder_1.append("The value must be non-negative");
              s = _builder_1.toString();
            }
          }
          if (!_matched) {
            if (Objects.equal(min,1)) {
              _matched=true;
              StringConcatenation _builder_2 = new StringConcatenation();
              _builder_2.append("The value must be positive");
              s = _builder_2.toString();
            }
          }
          if (!_matched) {
            StringConcatenation _builder_3 = new StringConcatenation();
            _builder_3.append("The value must be larger than or equal to ");
            _builder_3.append(min, "");
            s = _builder_3.toString();
          }
        } else {
          boolean _notEquals_3 = (!Objects.equal(max, null));
          if (_notEquals_3) {
            boolean _matched_1 = false;
            if (!_matched_1) {
              int _minus = (-1);
              if (Objects.equal(max,_minus)) {
                _matched_1=true;
                StringConcatenation _builder_4 = new StringConcatenation();
                _builder_4.append("The value must be negative");
                s = _builder_4.toString();
              }
            }
            if (!_matched_1) {
              StringConcatenation _builder_5 = new StringConcatenation();
              _builder_5.append("The value must be less than or equal to ");
              _builder_5.append(max, "");
              s = _builder_5.toString();
            }
          }
        }
      }
      CharSequence _xifexpression = null;
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(s);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        StringConcatenation _builder_6 = new StringConcatenation();
        _builder_6.append("<p class=\"help-block\">");
        _builder_6.append(s, "");
        _builder_6.append("</p>");
        _xifexpression = _builder_6;
      }
      _xblockexpression = (_xifexpression);
    }
    return _xblockexpression;
  }
  
  public CharSequence genQuestionDesc(final Meta item) {
    StringConcatenation _builder = new StringConcatenation();
    {
      String _description = item.getDescription();
      boolean _isNullOrEmpty = StringExtensions.isNullOrEmpty(_description);
      boolean _not = (!_isNullOrEmpty);
      if (_not) {
        _builder.append("<p class=\"help-block\">");
        String _description_1 = item.getDescription();
        _builder.append(_description_1, "");
        _builder.append("</p>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public ArrayList<Answer> getAnswers(final HasOptions hasOptions) {
    ArrayList<Answer> _arrayList = new ArrayList<Answer>();
    ArrayList<Answer> answers = _arrayList;
    EList<Option> _options = hasOptions.getOptions();
    for (final Option option : _options) {
      if ((option instanceof Answer)) {
        answers.add(((Answer) option));
      } else {
        if ((option instanceof AnswerTemplateRef)) {
          AnswerTemplate _template = ((AnswerTemplateRef) option).getTemplate();
          EList<Answer> _answers = _template.getAnswers();
          answers.addAll(_answers);
        }
      }
    }
    return answers;
  }
  
  public void genLatex(final Survey survey, final IFileSystemAccess fsa) {
    fsa.generateFile("survey.tex", "Something something");
  }
  
  public String genHtml(final Item question) {
    if (question instanceof Date) {
      return _genHtml((Date)question);
    } else if (question instanceof survey.Number) {
      return _genHtml((survey.Number)question);
    } else if (question instanceof Scale) {
      return _genHtml((Scale)question);
    } else if (question instanceof Single) {
      return _genHtml((Single)question);
    } else if (question instanceof Text) {
      return _genHtml((Text)question);
    } else if (question instanceof Group) {
      return _genHtml((Group)question);
    } else if (question instanceof Question) {
      return _genHtml((Question)question);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(question).toString());
    }
  }
}
