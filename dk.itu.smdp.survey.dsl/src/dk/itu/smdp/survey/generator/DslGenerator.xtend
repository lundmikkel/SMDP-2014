/*
 * generated by Xtext
 */
package dk.itu.smdp.survey.generator

import java.util.ArrayList
import java.util.HashMap
import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import survey.Answer
import survey.AnswerTemplateRef
import survey.Date
import survey.Group
import survey.HasOptions
import survey.Multiple
import survey.Number
import survey.Option
import survey.Question
import survey.Scale
import survey.Single
import survey.Survey
import survey.Table
import survey.Text

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class DslGenerator implements IGenerator {
	var nextId = 0;
	var idMap = new HashMap<Question, String>();
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		var survey = resource.contents.head as Survey
		
		survey.genPhp(fsa)
		survey.genLatex(fsa)
	}
	
	def genPhp(Survey survey, IFileSystemAccess fsa) {
		var body = '''
			«FOR item : survey.items»
				«item.genHtml(false)»
			«ENDFOR»
		'''
		
		var template = PhpTemplate.template(survey.title, survey.description, body)
		val filename = (if (survey.name.nullOrEmpty) "index" else survey.name) + ".php"
		fsa.generateFile(filename, template)
	}
	
	def getUniqueId(Question question) {
		nextId = nextId + 1;
		var id = 'input' + nextId;
		idMap.put(question, id);
		return id;
	}
	
	def dispatch String genHtml(Group group, boolean required)
		'''
		<div class="group">
		    «IF !group.title.nullOrEmpty»
		    <h2 id="grid" class="page-header">«group.title»</h2>
		    «ENDIF»
		    « IF !group.description.nullOrEmpty »
		    <p class="lead">«group.description»</p>
		    «ENDIF»
			«FOR question : group.questions»
				«question.genHtml(group.required)»
			«ENDFOR»
		</div>
		'''
	
	def genHeader(Question question, boolean required) {
		question.genHeader(required, "")
	}
	
	def genHeader(Question question, boolean required, String extraAttributes) '''
		<label class="control-label" «extraAttributes»>
	        «question.title» «question.genRequiredLabel(required)»
	        «IF !question.description.nullOrEmpty»<p class="help-block">«question.description»</p>«ENDIF»
		</label>
		«question.genHiddenInput(idMap.get(question))»
	'''
	
	def dispatch String genHtml(Text question, boolean required) {
		var id = getUniqueId(question);
		
		'''
		<div class="form-group">
			«question.genHeader(required, '''for="«id»"''')»
		    <div class="row">
		        <div class="col-xs-4">
					«IF !question.multiline»
					<input class="form-control" id="«id»" name="«id»" «question.genRequiredAttr(required)»>
					«ELSE»
					<textarea class="form-control" id="«id»" name="«id»" rows="3" «question.genRequiredAttr(required)»></textarea>
					«ENDIF»
		        </div>
		    </div>
		</div>
		'''
	}
	
	def dispatch String genHtml(Scale question, boolean required) {
		var id = getUniqueId(question);
		
		'''
		<div class="group">
		    <div class="form-group">
		    	«question.genHeader(required)»
		        <table class="scale">
		            <tr class="top">
		            	«IF !question.minLabel.nullOrEmpty »
		            	<td></td>
		                «ENDIF»
		                «FOR i : question.min..question.max BEFORE '<td>' SEPARATOR '</td><td>' AFTER '</td>' »
		                <label for="«id»_«i»">«i»</label>
		                «ENDFOR»
		            	«IF !question.minLabel.nullOrEmpty »
		            	<td></td>
		                «ENDIF»
		            </tr>
		            <tr class="bottom">
		            	«IF !question.minLabel.nullOrEmpty »
		            	<td><label for="«id»_«question.min»">«question.minLabel»</label></td>
		                «ENDIF»
		                «FOR i : question.min..question.max BEFORE '<td>' SEPARATOR '</td><td>' AFTER '</td>' »
		                <input type="radio" name="«id»" id="«id»_«i»" name="«id»_«i»" value="«i»" «question.genRequiredAttr(required)»/>
		                «ENDFOR»
		            	«IF !question.minLabel.nullOrEmpty »
		            	<td><label for="«id»_«question.max»">«question.maxLabel»</label></td>
		                «ENDIF»
		            </tr>
		        </table>
		    </div>
		</div>
		'''
	}
	
	def genDateFormat(Date question) {
		var list = new ArrayList<String>()
		
		if (question.day) {
			list.add('dd')
		}
		if (question.month) {
			list.add('mm')
		}
		if (question.year) {
			list.add('yyyy')
		}
		
		return list.join("/")
	}
	
	def genDateMinViewMode(Date question) {
		if (question.day)
			return 0
		if (question.month)
			return 1
		if (question.year)
			return 2
	}
	
	def dispatch String genHtml(Date question, boolean required) {
		val id = getUniqueId(question)
		'''
		<div class="form-group">
			«question.genHeader(required, '''for="«id»"''')»
		    <div class="row">
		        <div class="col-xs-4">
				    <div class="input-group date"
				    	data-date-format="«question.genDateFormat»"
				    	data-date-min-view-mode="«question.genDateMinViewMode»"
				    	«IF !question.start.nullOrEmpty»data-date-start-date="«question.start»"«ENDIF»
				    	«IF !question.end.nullOrEmpty»data-date-end-date="«question.end»"«ENDIF»
				    	>
						<input id="«id»" name="«id»" type="text" class="form-control" «question.genRequiredAttr(required)»>
						<span class="input-group-addon">
							<i class="glyphicon glyphicon-calendar"></i>
						</span>
					</div>
				</div>
				«IF question.showLimits»
				«question.genLimitsDesc»
				«ENDIF»
		    </div>
		</div>
		'''
	}
	
	def dispatch String genHtml(Number question, boolean required) {
		var id = getUniqueId(question);
		'''
		<div class="form-group">
	    	«question.genHeader(required, '''for="«id»"''')»
		    <div class="row">
		        <div class="col-xs-2">
		            <input type="number" class="form-control" id="«id»" name="«id»" «question.genRequiredAttr(required)» step="1"
		            «IF question.min != null»
		            min="«question.min»"
		            «ENDIF»
		            «IF question.max != null»
		            max="«question.max»"
		            «ENDIF»
		            >
		        </div>
		    </div>
            «IF question.showLimits»
            «question.genLimitsDesc»
            «ENDIF»
		</div>
		'''
	}
	
	def dispatch String genHtml(Single question, boolean required) {
		var id = getUniqueId(question);
		var i = 0
		
		'''
		<div class="form-group">
	    	«question.genHeader(required)»
			<div>
				«FOR a : question.getAnswers BEFORE '<div class="radio"><label>'
											 SEPARATOR '</label></div><div class="radio"><label>'
											 AFTER '</label></div>' »
				<input type="radio" name="«id»" id="«id»_«(i = i + 1)»" value="«i»" «question.genRequiredAttr(required)»/>
				«a.label»
				«ENDFOR»
			</div>
		</div>
		'''
	}
		
	def dispatch String genHtml(Multiple question, boolean required) {
		val id = getUniqueId(question);
		var i = 0
		val min = question.getMin(required)
		val max = question.getMax(required)
		
		'''
		<div class="form-group"
			«IF min > 0» data-min-selections="«min»" «ENDIF»
			«IF max != null» data-max-selections="«max»" «ENDIF»>
	    	«question.genHeader(required)»
		    «FOR a : question.getAnswers BEFORE '<div class="checkbox"><label>'
		    							 SEPARATOR '</label></div><div class="checkbox"><label>'
		    							 AFTER '</label></div>' »
		    <input type="checkbox" name="«id»" id="«id»_«(i = i + 1)»" value="«i»"> «a.label»
			«ENDFOR»
		</div>
		'''
	}
	
	def dispatch String genHtml(Table question, boolean required) {
		val answers = question.getAnswers
		'''
		<div class="form-group">
	    	«question.genHeader(required)»
		    <table class="table table-striped">
		    	<thead>
					<tr>
						<th></th>
						«FOR a : answers»
						<th>«a.label»</th>
						«ENDFOR»
					</tr>
				</thead>
				<tbody>
					«FOR q : question.questions»
					<tr>
					    <td><label for="«var qid = getUniqueId(question)»_«var aid = 0»">«q.title»</label></td>
					    «FOR a : answers»
					    <td><input type="«IF question.multiple»checkbox«ELSE»radio«ENDIF»" name="«qid»" id="«qid»_«(aid = aid + 1)»"/></td>
					    «ENDFOR»
					</tr>
				    «ENDFOR»
				</tbody>
			</table>
		</div>
		'''
	}
	
	def dispatch String genHtml(Question question, boolean required) '''
		MISSING: «question.title» («question.class»)
	'''
	
	
	def getMin(Multiple question, boolean required) {
		var min = if (question.min != null) question.min else 0
		if ((required || question.required) && min == 0)
			min = 1
		return min
	}
	
	def getMax(Multiple question, boolean required) {
		if (question.max != null) question.max.intValue else null
	}
	
	def genRequiredLabel(Question question, boolean requiredParent)
		'''«IF requiredParent || question.required» * «ENDIF»'''
				
	def genRequiredAttr(Question question, boolean requiredParent)
		'''«IF requiredParent || question.required» required «ENDIF»'''
	
	def genLimitsDesc(Date question) {
		val start = question.start
		val end = question.end
		var s = ""
		
		if (!start.nullOrEmpty && !end.nullOrEmpty) {
			s = '''The date must be between «start» and «end»'''
		}
		else if (!start.nullOrEmpty) {
			s = '''The date must be before «end»'''
		}
		else if (!end.nullOrEmpty) {
			s = '''The date must be after «start»'''
		}
		
		if (!s.nullOrEmpty) {
			'''<p class="help-block">«s»</p>'''
		}
	}
	
	def genLimitsDesc(Number question) {
		val min = question.min
		val max = question.max
		var s = ''
		if (min != null && max != null) {
			s = '''The value must be between «min» and «max» (both included)'''
		}
		else if (min != null) {
			switch(min) {
				case 0:
					s = '''The value must be non-negative'''
				case 1:
					s = '''The value must be positive'''
				default:
					s = '''The value must be larger than or equal to «min»'''
			}
		}
		else if (max != null) {
			switch(max) {
				case -1:
					s = '''The value must be negative'''
				default:
					s = '''The value must be less than or equal to «max»'''
			}
		}
		
		if (!s.nullOrEmpty) {
			'''<p class="help-block">«s»</p>'''
		}
	}
	
	def getAnswers(HasOptions hasOptions) {
		var answers = new ArrayList<Answer>()
		
		for (Option option : hasOptions.options) {
			if (option instanceof Answer) {
				answers.add(option as Answer)
			}
			else if (option instanceof AnswerTemplateRef) {
				answers.addAll((option as AnswerTemplateRef).template.answers)
			}
		}
		
		return answers
	}
	
	def genHiddenInput(Question question, String id) '''
		<input type="hidden" name="«id»_question" value="«question.title»" />
	'''
	
	def genLatex(Survey survey, IFileSystemAccess fsa) {
		fsa.generateFile("survey.tex", "Something something")
	}
}
