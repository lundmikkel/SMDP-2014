/*
 * generated by Xtext
 */
package dk.itu.smdp.survey.validation

import java.util.HashMap
import survey.Survey
import org.eclipse.xtext.validation.Check
import survey.Question
import survey.SurveyPackage
import survey.Group
import survey.AnswerTemplate

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DslValidator extends AbstractDslValidator {
	
	// TODO: lower/upper in Multiple must be between 0 and the number of answers 

	public static val DUPLICATE_NAME = 'duplicateName'
	public static val MISSING_NAME = 'missingName'

	@Check
	def checkThatQuestionIDsAreUnique(Survey survey) {
		var questionMap = new HashMap<String, Question>
		
		println("---------------")
		
		for (Question question : survey.items.filter(typeof(Question))) {
			// Only iterate questions with an id
			if (!question.id.nullOrEmpty) {
				println(question.id)
				
				// Check if the id already exists
				if (questionMap.containsKey(question.id)) {
					error(
						'Question IDs must be unique',
						question,
						SurveyPackage.Literals.QUESTION__ID,
						DUPLICATE_NAME
					)
					error(
						'Question IDs must be unique',
						questionMap.get(question.id),
						SurveyPackage.Literals.QUESTION__ID,
						DUPLICATE_NAME
					)
				}
				// Add it to the list
				else {
					questionMap.put(question.id, question)
				}
			}
		}
		
		
		for (Group group : survey.items.filter(typeof(Group))) {
			// Iterate the group's questions
			for (Question question : group.questions) {
				// Only iterate questions with an id
				if (!question.id.nullOrEmpty) {
					println(question.id)
					
					// Check if the id already exists
					if (questionMap.containsKey(question.id)) {
						error(
							'Question IDs must be unique',
							question,
							SurveyPackage.Literals.QUESTION__ID,
							DUPLICATE_NAME
						)
						error(
							'Question IDs must be unique',
							questionMap.get(question.id),
							SurveyPackage.Literals.QUESTION__ID,
							DUPLICATE_NAME
						)
					}
					// Add it to the list
					else {
						questionMap.put(question.id, question)
					}
				}
			}
		}
	}

	@Check
	def checkThatTemplateIDsAreUnique(Survey survey) {
		var templateMap = new HashMap<String, AnswerTemplate>
		
		/*for (AnswerTemplate template : survey.templates) {
			if (template.id.nullOrEmpty) {
				error(
					'Templates must have IDs',
					template,
					SurveyPackage.Literals.ANSWER_TEMPLATE__ID,
					DUPLICATE_NAME
				)
			}
			else {
				// Only iterate questions with an id
				if (!template.id.nullOrEmpty) {
					// Check if the id already exists
					if (templateMap.containsKey(template.id)) {
						error(
							'Template IDs must be unique',
							template,
							SurveyPackage.Literals.ANSWER_TEMPLATE__ID,
							DUPLICATE_NAME
						)
						error(
							'Template IDs must be unique',
							templateMap.get(template.id),
							SurveyPackage.Literals.ANSWER_TEMPLATE__ID,
							DUPLICATE_NAME
						)
					}
					// Add it to the list
					else {
						templateMap.put(template.id, template)
					}
				}
			}
		}*/
	}
}
