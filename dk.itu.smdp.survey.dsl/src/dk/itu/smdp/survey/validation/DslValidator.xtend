/*
 * generated by Xtext
 */
package dk.itu.smdp.survey.validation

import java.util.HashMap
import survey.Survey
import org.eclipse.xtext.validation.Check
import survey.Question
import survey.SurveyPackage
import survey.Group

/**
 * Custom validation rules. 
 *
 * see http://www.eclipse.org/Xtext/documentation.html#validation
 */
class DslValidator extends AbstractDslValidator {

	public static val DUPLICATE_NAME = 'duplicateName'

	@Check
	def checkThatQuestionIDsAreUnique(Survey survey) {
		var questionMap = new HashMap<String, Question>
		var questionList = survey.items.filter(typeof(Question))

		//		for (Group g : survey.items.filter(typeof(Group)) ) {
		//			questionList = questionList + g.questions
		//		}
		for (Question question : questionList) {
			println("Explicit Question ID:" + question.id)
			if (!question.id.empty) {
				if (questionMap.containsKey(question.id)) {
					error(
						'Question IDs must be unique',
						question,
						SurveyPackage.Literals.QUESTION__ID,
						DUPLICATE_NAME
					)
				} else {
					questionMap.put(question.id, question)
				}
			}
		}
		for (Group group : survey.items.filter(typeof(Group))) {
			println("Number of groups: " + survey.items.filter(typeof(Group)).size)
			if (!group.questions.empty) {
				for (Question groupQuestion : group.questions) {
					println("Group title: " + group.title + " Group Question ID:" + groupQuestion.id)
					if (!groupQuestion.id.empty) {
						if (questionMap.containsKey(groupQuestion.id)) {
							error(
								'Question IDs must be unique',
								groupQuestion,
								SurveyPackage.Literals.QUESTION__ID,
								DUPLICATE_NAME
							)
						} else {
							questionMap.put(groupQuestion.id, groupQuestion)
						}
					}
				}
			}
		}
	}
}
